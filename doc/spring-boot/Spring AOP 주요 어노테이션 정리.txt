# 🧩 Spring AOP 주요 어노테이션 정리 및 샘플 코드

---

## ✅ @Before
- 타겟 메서드 **실행 이전**에 공통 기능 실행

```java
@Aspect
@Component
public class LoggingAspect {

    @Before("execution(* com.example.service.*.*(..))")
    public void logBefore(JoinPoint joinPoint) {
        System.out.println("[Before] 메서드 호출: " + joinPoint.getSignature().getName());
    }
}
```

---

## ✅ @After
- 타겟 메서드 **실행 완료 후** (정상/예외 상관없이 무조건 실행)

```java
@Aspect
@Component
public class LoggingAspect {

    @After("execution(* com.example.service.*.*(..))")
    public void logAfter(JoinPoint joinPoint) {
        System.out.println("[After] 메서드 종료: " + joinPoint.getSignature().getName());
    }
}
```

---

## ✅ @AfterReturning
- 타겟 메서드가 **정상적으로 실행된 후**, 리턴값에 접근 가능

```java
@Aspect
@Component
public class LoggingAspect {

    @AfterReturning(pointcut = "execution(* com.example.service.*.*(..))", returning = "result")
    public void logAfterReturning(JoinPoint joinPoint, Object result) {
        System.out.println("[AfterReturning] 결과: " + result);
    }
}
```

---

## ✅ @AfterThrowing
- 타겟 메서드에서 **예외가 발생했을 때만** 실행

```java
@Aspect
@Component
public class LoggingAspect {

    @AfterThrowing(pointcut = "execution(* com.example.service.*.*(..))", throwing = "ex")
    public void logException(JoinPoint joinPoint, Exception ex) {
        System.out.println("[AfterThrowing] 예외 발생: " + ex.getMessage());
    }
}
```

---

## ✅ @Around
- 메서드 실행 **전/후/예외 모두 제어 가능** → 가장 강력한 advice
- `ProceedingJoinPoint` 사용 (반드시 `proceed()` 호출 필요)

```java
@Aspect
@Component
public class ExecutionTimeAspect {

    @Around("execution(* com.example.service.*.*(..))")
    public Object measureTime(ProceedingJoinPoint joinPoint) throws Throwable {
        long start = System.currentTimeMillis();

        Object result = joinPoint.proceed(); // 원래 메서드 실행

        long end = System.currentTimeMillis();
        System.out.println("[Around] 실행 시간: " + (end - start) + "ms");
        return result;
    }
}
```

---

## 🧠 포인트컷 예시 모음

| 표현식 | 설명 |
|--------|------|
| `execution(* com.example.service.*.*(..))` | 특정 패키지의 모든 메서드에 적용 |
| `@annotation(MyAnnotation)` | 해당 어노테이션이 붙은 메서드에만 적용 |
| `@within(MyAnnotation)` | 클래스 단위로 어노테이션이 붙은 경우 전체 메서드에 적용 |

---

## ✅ 실전 팁
- `@Around`는 `proceed()`를 호출해야만 원래 메서드가 실행됨
- `@Before`에서는 예외를 던지면 **메서드 실행 자체가 차단**됨
- AOP는 외부에서 호출된 메서드에만 적용되므로 **내부 호출은 프록시를 통과하지 못함**
- AOP 클래스는 반드시 `@Aspect`, `@Component` 둘 다 필요

---

이 파일은 AOP 어노테이션과 예시를 빠르게 참조할 수 있도록 구성되었습니다 ✅

